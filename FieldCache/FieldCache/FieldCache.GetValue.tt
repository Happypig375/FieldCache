﻿<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated from the "FieldCache.GetValue.tt" T4 Text Template.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;

namespace FieldCacheNamespace
{
    partial struct FieldCache<T> : IEquatable<FieldCache<T>>
    {
<# for (int i = 0; i < 10; i++) { #>
        /// <summary>
        /// Use this in your property's getter
        /// </summary>
        /// <param name="ctor">Expression to initialize the given property</param>
        <# for (int j = 0; j < i; j++) { #>
        /// <param name="arg<#= j #>"><#= j + 1 #>-th argument to be passed in the factory lambda</param>
        <# } #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T GetValue
    <# if (i > 0) { #>
        <
        T0
        <# for (int j = 1; j < i; j++) { #>
                , T<#= j #>
        <# } #>
        >
    <# } #>
(in Func<
    <# for (int j = 0; j < i; j++) { #>
        T<#= j #>, 
    <# } #>
T> ctor
    <# for (int j = 0; j < i; j++) { #>
            , T<#= j #> arg<#= j #>
    <# } #>
)
        {
            if (!initted)
            {
                lock (ctor)
                {
                    if (!initted)
                    {
                        value = ctor(
    <# if (i > 0) { #>
    arg0
        <# for (int j = 1; j < i; j++) { #>
                , arg<#= j #>
        <# } #>
    <# } #>
);
                        initted = true;
                    }
                }
            }
            return value;
        }
<# } #>
    }
}
